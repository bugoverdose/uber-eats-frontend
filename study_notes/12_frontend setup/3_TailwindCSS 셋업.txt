[TailwindCSS 셋업]
0) Tailwind CSS intelliSense : 필수 VSC extention. 클래스명 자동완성 기능.
- tailwind.config.js 파일을 자동으로 주시함.
 
===============================================================
각 프로젝트에서 실행할 설치 작업들: https://tailwindcss.com/docs/installation

1) npm install tailwindcss postcss autoprefixer  
- postcss : css를 post process하기 위한 라이브러리.
- autoprefixer : postcss의 플러그인. 브라우저 호환성 목적. adds prefix compatibility to classnames.
               : ex) 특정 브라우저에서 사용할 수 없는 css 속성 사용시, -moz-, -ms 등의 접두사를 적절하게 추가해줘서 브라우저 호환성 높여줌. (-moz-border-radius 등)

===============================================================
2) postcss.config.js 파일 생성하고 해당 코드 직접 복붙. (Add Tailwind as a PostCSS plugin)
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
}

// => tailwind를 일반 CSS파일로 build하기 위해 꼭 필요. 필수사항.
===============================================================
3) src/styles/tailwind.css 파일 생성하고 해당 코드들 복붙. (파일명 자유. .css 확장자만 필수)
// tailwind.css
@tailwind base;
@tailwind components;
@tailwind utilities;

// => postCSS는 해당 코드 3줄을 토대로 Tailwind의 모든 css 코드들로 전부 대체해줌. 
===============================================================
4) npx tailwindcss init               
// => tailwind customization하고 싶으면 필요.  

// tailwind.config.js 파일 & 코드 자동 생성됨. 
module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
}

// => postCSS는 해당 파일에서 추가로 설정한 클래스명들도 전부 생성해줌.
===============================================================
5) "tailwind build 인풋경로 -o 아웃풋경로" 형식의 명령어 생성
// package.json
"scripts": {
    "tailwind:build": "tailwind build ./src/styles/tailwind.css -o ./src/styles/styles.css",
    "start": "npm run tailwind:build & react-scripts start",
}

// npm run tailwind:build 실행시, 아웃풋경로에 모든 tailwind 클래스들 + 추가로 생성한 클래스들 생성됨.
// npm run start : 실행할 때마다 tailwind:build가 필요한 경우 자동으로 재실행되도록 설정. (캡슐화 작업 진행한 경우)
===============================================================
6) index.tsx 파일에서 아웃풋경로 그대로 import. => tailwind 클래스들 그대로 사용 가능.
import "./styles/styles.css";

===============================================================
===============================================================
cf) 캡슐화(encapsulation) 방법. 서순 주의. 별도의 셋업 불필요.

// tailwind.css에서 복수의 tailwind 클래스명 활용한 새로운 클래스명 지정.
@tailwind base;
@tailwind components;
.btn {
  @apply text-base font-medium rounded-lg p-3;
}
@tailwind utilities;

// npm run tailwind:build 실행시, 아웃풋 파일에 해당 클래스도 새롭게 생성됨.
// btn이라는 클래스명으로 자유롭게 접근 가능.
===============================================================
